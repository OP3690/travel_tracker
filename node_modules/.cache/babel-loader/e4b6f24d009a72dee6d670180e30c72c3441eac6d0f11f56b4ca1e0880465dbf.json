{"ast":null,"code":"var _jsxFileName = \"/Users/omprakashutaha/Desktop/Map2/src/components/WorldMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\n\n// SVG source as a string (extracted from WorldMap_SVG_Source.notepad)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst svgSource = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 2754 1398\" style=\"width:100%;height:auto;max-width:100vw;\">\n  <title>World Map</title>\n  <style type=\"text/css\">\n    .landxx { fill: #c0c0c0; stroke: #ffffff; stroke-width: 0.5; fill-rule: evenodd; cursor: pointer; transition: fill 0.2s; }\n    .landxx.selected { fill: #2ecc40 !important; }\n    .landxx:hover { fill: #aee9c1; }\n  </style>\n  <!-- ... SVG paths and groups for countries ... -->\n  <!-- The SVG content from WorldMap_SVG_Source.notepad goes here, excluding the XML header if needed -->\n</svg>`;\nexport default function WorldMapView() {\n  _s();\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const svgContainerRef = useRef();\n  useEffect(() => {\n    var _svgContainerRef$curr;\n    // Wait for SVG to be injected\n    const svgEl = (_svgContainerRef$curr = svgContainerRef.current) === null || _svgContainerRef$curr === void 0 ? void 0 : _svgContainerRef$curr.querySelector('svg');\n    if (!svgEl) return;\n    // Remove previous listeners\n    svgEl.querySelectorAll('.landxx').forEach(path => {\n      path.replaceWith(path.cloneNode(true));\n    });\n    // Add click listeners to all country paths\n    svgEl.querySelectorAll('.landxx').forEach(path => {\n      path.addEventListener('click', () => {\n        var _path$querySelector;\n        // Remove previous selection\n        svgEl.querySelectorAll('.landxx.selected').forEach(sel => sel.classList.remove('selected'));\n        path.classList.add('selected');\n        // Use <title> or id for country name\n        const title = ((_path$querySelector = path.querySelector('title')) === null || _path$querySelector === void 0 ? void 0 : _path$querySelector.textContent) || path.getAttribute('id') || 'Unknown';\n        setSelectedCountry(title);\n      });\n    });\n  }, [svgSource]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '100vw',\n      margin: '0 auto',\n      padding: 24\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: 16\n      },\n      children: \"World Map (SVG)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: svgContainerRef,\n      style: {\n        width: '100%',\n        height: 'auto',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      dangerouslySetInnerHTML: {\n        __html: svgSource\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Selected Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), \" \", selectedCountry]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(WorldMapView, \"8UDgdk1EDkf7AOD1FgavHdbEcAA=\");\n_c = WorldMapView;\nvar _c;\n$RefreshReg$(_c, \"WorldMapView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","svgSource","WorldMapView","_s","selectedCountry","setSelectedCountry","svgContainerRef","_svgContainerRef$curr","svgEl","current","querySelector","querySelectorAll","forEach","path","replaceWith","cloneNode","addEventListener","_path$querySelector","sel","classList","remove","add","title","textContent","getAttribute","style","maxWidth","margin","padding","children","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","display","justifyContent","dangerouslySetInnerHTML","__html","marginTop","_c","$RefreshReg$"],"sources":["/Users/omprakashutaha/Desktop/Map2/src/components/WorldMapView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\n// SVG source as a string (extracted from WorldMap_SVG_Source.notepad)\nconst svgSource = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 2754 1398\" style=\"width:100%;height:auto;max-width:100vw;\">\n  <title>World Map</title>\n  <style type=\"text/css\">\n    .landxx { fill: #c0c0c0; stroke: #ffffff; stroke-width: 0.5; fill-rule: evenodd; cursor: pointer; transition: fill 0.2s; }\n    .landxx.selected { fill: #2ecc40 !important; }\n    .landxx:hover { fill: #aee9c1; }\n  </style>\n  <!-- ... SVG paths and groups for countries ... -->\n  <!-- The SVG content from WorldMap_SVG_Source.notepad goes here, excluding the XML header if needed -->\n</svg>`;\n\nexport default function WorldMapView() {\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const svgContainerRef = useRef();\n\n  useEffect(() => {\n    // Wait for SVG to be injected\n    const svgEl = svgContainerRef.current?.querySelector('svg');\n    if (!svgEl) return;\n    // Remove previous listeners\n    svgEl.querySelectorAll('.landxx').forEach(path => {\n      path.replaceWith(path.cloneNode(true));\n    });\n    // Add click listeners to all country paths\n    svgEl.querySelectorAll('.landxx').forEach(path => {\n      path.addEventListener('click', () => {\n        // Remove previous selection\n        svgEl.querySelectorAll('.landxx.selected').forEach(sel => sel.classList.remove('selected'));\n        path.classList.add('selected');\n        // Use <title> or id for country name\n        const title = path.querySelector('title')?.textContent || path.getAttribute('id') || 'Unknown';\n        setSelectedCountry(title);\n      });\n    });\n  }, [svgSource]);\n\n  return (\n    <div style={{ maxWidth: '100vw', margin: '0 auto', padding: 24 }}>\n      <h1 style={{ textAlign: 'center', marginBottom: 16 }}>World Map (SVG)</h1>\n      <div ref={svgContainerRef} style={{ width: '100%', height: 'auto', display: 'flex', justifyContent: 'center' }}\n        dangerouslySetInnerHTML={{ __html: svgSource }}\n      />\n      {selectedCountry && (\n        <div style={{ textAlign: 'center', marginTop: 16 }}>\n          <strong>Selected Country:</strong> {selectedCountry}\n        </div>\n      )}\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}