{"ast":null,"code":"var _jsxFileName = \"/Users/omprakashutaha/Desktop/Map2/src/components/WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect, useRef } from 'react';\nimport { worldMapSVG } from '../assets/worldMapData';\nimport './WorldMap.css';\n\n// Robustly add data-name attributes using DOMParser\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction addDataNameToSVG(svgString) {\n  if (typeof window === 'undefined' || !window.DOMParser) return svgString;\n  const parser = new window.DOMParser();\n  const doc = parser.parseFromString(svgString, 'image/svg+xml');\n  const groups = doc.querySelectorAll('g');\n  groups.forEach(g => {\n    const title = g.querySelector('title');\n    if (title) {\n      const name = title.textContent;\n      g.querySelectorAll('path, circle').forEach(el => {\n        el.setAttribute('data-name', name);\n      });\n    }\n  });\n  return doc.documentElement.outerHTML;\n}\n\n// Helper to get the centroid of a country's path or circle\nfunction getCountryCentroids(svgString) {\n  const centroids = {};\n  if (typeof window === 'undefined' || !window.DOMParser) return centroids;\n  const parser = new window.DOMParser();\n  const doc = parser.parseFromString(svgString, 'image/svg+xml');\n  const groups = doc.querySelectorAll('g');\n  groups.forEach(g => {\n    const title = g.querySelector('title');\n    const name = title ? title.textContent : null;\n    if (!name) return;\n    // Try to get a circle (for small countries)\n    const circle = g.querySelector('circle');\n    if (circle) {\n      centroids[name] = {\n        x: parseFloat(circle.getAttribute('cx')),\n        y: parseFloat(circle.getAttribute('cy'))\n      };\n      return;\n    }\n    // Try to get a path and compute its bounding box center\n    const path = g.querySelector('path');\n    if (path && path.getBBox) {\n      const bbox = path.getBBox();\n      centroids[name] = {\n        x: bbox.x + bbox.width / 2,\n        y: bbox.y + bbox.height / 2\n      };\n    }\n  });\n  return centroids;\n}\nfunction WorldMap({\n  selectedLocations = [],\n  setSelectedLocations = () => {},\n  onLocationClick = () => {}\n}) {\n  _s();\n  const [hoveredName, setHoveredName] = useState('');\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [transform, setTransform] = useState({\n    x: 0,\n    y: 0,\n    scale: 1\n  });\n  const svgContainerRef = useRef();\n  const [pinPositions, setPinPositions] = useState([]);\n\n  // Memoize the processed SVG string\n  const processedSVG = useMemo(() => addDataNameToSVG(worldMapSVG), []);\n\n  // Memoize centroids for pins\n  const centroids = useMemo(() => getCountryCentroids(worldMapSVG), []);\n\n  // Highlight selected countries and compute pin positions after SVG is rendered\n  useEffect(() => {\n    var _svgContainerRef$curr;\n    const svgEl = (_svgContainerRef$curr = svgContainerRef.current) === null || _svgContainerRef$curr === void 0 ? void 0 : _svgContainerRef$curr.querySelector('svg');\n    if (!svgEl) return;\n    // Remove previous selected\n    svgEl.querySelectorAll('path.selected').forEach(p => p.classList.remove('selected'));\n    // For pins\n    const pins = [];\n    selectedLocations.forEach(loc => {\n      // Find all <g> with matching <title>\n      const gs = Array.from(svgEl.querySelectorAll('g')).filter(g => g.querySelector('title') && g.querySelector('title').textContent === loc.name);\n      let largestArea = 0;\n      let pin = null;\n      gs.forEach(g => {\n        // Highlight all paths\n        g.querySelectorAll('path').forEach(path => {\n          path.classList.add('selected');\n          // For pin: use the largest path's bbox\n          try {\n            const bbox = path.getBBox();\n            const area = bbox.width * bbox.height;\n            if (area > largestArea) {\n              largestArea = area;\n              pin = {\n                x: bbox.x + bbox.width / 2,\n                y: bbox.y + bbox.height / 2\n              };\n            }\n          } catch (e) {}\n        });\n        // If there is a circle, prefer it for small countries\n        const circle = g.querySelector('circle');\n        if (circle) {\n          pin = {\n            x: parseFloat(circle.getAttribute('cx')),\n            y: parseFloat(circle.getAttribute('cy'))\n          };\n        }\n      });\n      if (pin) pins.push({\n        name: loc.name,\n        ...pin\n      });\n    });\n    setPinPositions(pins);\n  }, [selectedLocations, processedSVG]);\n  function handleLocationClick(event) {\n    let el = event.target;\n    let g = null;\n    // Walk up to the nearest <g> with a <title>\n    while (el && el.tagName !== 'svg') {\n      if (el.tagName === 'g' && el.querySelector('title')) {\n        g = el;\n        break;\n      }\n      el = el.parentNode;\n    }\n    if (!g) return;\n    const id = g.getAttribute('id') || g.querySelector('title').textContent;\n    const name = g.querySelector('title').textContent;\n    if (!id || !name) return;\n    setSelectedLocations(prev => {\n      const exists = prev.find(s => s.id === id);\n      if (exists) {\n        return prev.filter(s => s.id !== id);\n      } else {\n        return [...prev, {\n          id,\n          name\n        }];\n      }\n    });\n    onLocationClick({\n      id,\n      name\n    });\n  }\n  function onLocationMouseOver(event) {\n    const name = event.target.dataset.name;\n    if (name) {\n      setHoveredName(name);\n    } else {\n      setHoveredName('');\n    }\n  }\n  function onLocationMouseOut() {\n    setHoveredName('');\n  }\n  function handleZoomIn() {\n    setTransform(prev => ({\n      ...prev,\n      scale: Math.min(prev.scale * 1.2, 5)\n    }));\n  }\n  function handleZoomOut() {\n    setTransform(prev => ({\n      ...prev,\n      scale: Math.max(prev.scale * 0.8, 0.5)\n    }));\n  }\n  function handleReset() {\n    setTransform({\n      x: 0,\n      y: 0,\n      scale: 1\n    });\n  }\n  function handleMouseMove(event) {\n    setMousePos({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  // Pin SVG\n  const pinSVG = /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: \"12\",\n        cy: \"8.5\",\n        rx: \"5\",\n        ry: \"5.5\",\n        fill: \"#e53935\",\n        stroke: \"#b71c1c\",\n        strokeWidth: \"1.5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n        d: \"M12 14V22\",\n        stroke: \"#b71c1c\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"12\",\n        cy: \"8.5\",\n        r: \"2\",\n        fill: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"world-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"world-map-svg\",\n      ref: svgContainerRef,\n      dangerouslySetInnerHTML: {\n        __html: processedSVG\n      },\n      onClick: handleLocationClick,\n      onMouseOver: onLocationMouseOver,\n      onMouseOut: onLocationMouseOut,\n      onMouseMove: handleMouseMove,\n      style: {\n        transform: `scale(${transform.scale})`,\n        transformOrigin: 'center center'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"world-map-pins\",\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      viewBox: \"0 0 2754 1398\",\n      children: pinPositions.map(pin => /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${pin.x},${pin.y})`,\n        children: [/*#__PURE__*/_jsxDEV(\"ellipse\", {\n          cx: 0,\n          cy: 0,\n          rx: 18,\n          ry: 18,\n          fill: \"#e53935\",\n          opacity: \"0.15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: \"translate(-12,-24)\",\n          children: pinSVG.props.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, pin.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zoom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"zoom-button\",\n        onClick: handleZoomIn,\n        title: \"Zoom In\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"zoom-button\",\n        onClick: handleZoomOut,\n        title: \"Zoom Out\",\n        children: \"\\u2212\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"zoom-button\",\n        onClick: handleReset,\n        title: \"Reset View\",\n        children: \"\\u21BA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visited-countries-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"visited-countries-title\",\n        children: \"List of Visited Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"visited-countries-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: selectedLocations.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: 2,\n              style: {\n                textAlign: 'center',\n                color: '#aaa'\n              },\n              children: \"No countries selected yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this) : selectedLocations.map((loc, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: idx + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"country-name-cell\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"country-flag\",\n                role: \"img\",\n                \"aria-label\": loc.name,\n                children: getFlagEmoji(loc.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this), loc.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this)]\n          }, loc.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), hoveredName && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"world-map-tooltip\",\n      style: {\n        left: mousePos.x + 12,\n        top: mousePos.y + 12\n      },\n      children: hoveredName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper to get flag emoji from country name (simple mapping for demo)\n_s(WorldMap, \"3b0g/1tUxmaHjJGngDWOE4Wrkts=\");\n_c = WorldMap;\nfunction getFlagEmoji(countryName) {\n  // ISO country code mapping (partial, for demo)\n  const countryToCode = {\n    'India': 'IN',\n    'United States of America': 'US',\n    'United States': 'US',\n    'Canada': 'CA',\n    'Australia': 'AU',\n    'United Kingdom': 'GB',\n    'France': 'FR',\n    'Germany': 'DE',\n    'Japan': 'JP',\n    'China': 'CN',\n    'Brazil': 'BR',\n    'South Africa': 'ZA',\n    'Italy': 'IT',\n    'Spain': 'ES',\n    'Russia': 'RU',\n    'Mexico': 'MX',\n    'Pakistan': 'PK',\n    'Bangladesh': 'BD',\n    'Indonesia': 'ID',\n    'Turkey': 'TR',\n    'Argentina': 'AR',\n    'Nigeria': 'NG',\n    'Egypt': 'EG',\n    'Saudi Arabia': 'SA',\n    'South Korea': 'KR',\n    'North Korea': 'KP',\n    'Vietnam': 'VN',\n    'Thailand': 'TH',\n    'Malaysia': 'MY',\n    'Singapore': 'SG',\n    'New Zealand': 'NZ',\n    'Nepal': 'NP',\n    'Sri Lanka': 'LK',\n    'Afghanistan': 'AF',\n    'United Arab Emirates': 'AE',\n    'Qatar': 'QA',\n    'Kuwait': 'KW',\n    'Oman': 'OM',\n    'Iraq': 'IQ',\n    'Iran': 'IR',\n    'Israel': 'IL',\n    'Jordan': 'JO',\n    'Morocco': 'MA',\n    'Kenya': 'KE',\n    'Ethiopia': 'ET',\n    'Greece': 'GR',\n    'Switzerland': 'CH',\n    'Netherlands': 'NL',\n    'Belgium': 'BE',\n    'Sweden': 'SE',\n    'Norway': 'NO',\n    'Denmark': 'DK',\n    'Finland': 'FI',\n    'Poland': 'PL',\n    'Ukraine': 'UA',\n    'Czech Republic': 'CZ',\n    'Austria': 'AT',\n    'Portugal': 'PT',\n    'Ireland': 'IE',\n    'Hungary': 'HU',\n    'Romania': 'RO',\n    'Slovakia': 'SK',\n    'Slovenia': 'SI',\n    'Croatia': 'HR',\n    'Bulgaria': 'BG',\n    'Serbia': 'RS',\n    'Turkey': 'TR',\n    'Philippines': 'PH',\n    'Myanmar': 'MM',\n    'Cambodia': 'KH',\n    'Laos': 'LA',\n    'Mongolia': 'MN',\n    'Kazakhstan': 'KZ',\n    'Uzbekistan': 'UZ',\n    'Turkmenistan': 'TM',\n    'Kyrgyzstan': 'KG',\n    'Tajikistan': 'TJ',\n    'Georgia': 'GE',\n    'Armenia': 'AM',\n    'Azerbaijan': 'AZ',\n    'Belarus': 'BY',\n    'Lithuania': 'LT',\n    'Latvia': 'LV',\n    'Estonia': 'EE',\n    'Iceland': 'IS',\n    'Luxembourg': 'LU',\n    'Liechtenstein': 'LI',\n    'Malta': 'MT',\n    'Cyprus': 'CY',\n    'Monaco': 'MC',\n    'San Marino': 'SM',\n    'Vatican City': 'VA',\n    'Andorra': 'AD',\n    'Albania': 'AL',\n    'Bosnia and Herzegovina': 'BA',\n    'Montenegro': 'ME',\n    'North Macedonia, Republic of': 'MK',\n    'Moldova': 'MD',\n    'Gibraltar': 'GI',\n    'Greenland': 'GL',\n    'Faroe Islands': 'FO',\n    'Svalbard': 'SJ',\n    'Palestine': 'PS',\n    'Lebanon': 'LB',\n    'Syria': 'SY',\n    'Yemen': 'YE',\n    'Sudan': 'SD',\n    'South Sudan': 'SS',\n    'Libya': 'LY',\n    'Tunisia': 'TN',\n    'Algeria': 'DZ',\n    'Western Sahara': 'EH',\n    'Mauritania': 'MR',\n    'Mali': 'ML',\n    'Senegal': 'SN',\n    'Gambia': 'GM',\n    'Guinea-Bissau': 'GW',\n    'Guinea': 'GN',\n    'Sierra Leone': 'SL',\n    'Liberia': 'LR',\n    'Ivory Coast': 'CI',\n    'Ghana': 'GH',\n    'Togo': 'TG',\n    'Benin': 'BJ',\n    'Burkina Faso': 'BF',\n    'Niger': 'NE',\n    'Chad': 'TD',\n    'Cameroon': 'CM',\n    'Central African Republic': 'CF',\n    'Congo, Democratic Republic of the': 'CD',\n    'Congo, Republic of the': 'CG',\n    'Gabon': 'GA',\n    'Equatorial Guinea': 'GQ',\n    'Sao Tome and Principe': 'ST',\n    'Angola': 'AO',\n    'Zambia': 'ZM',\n    'Malawi': 'MW',\n    'Mozambique': 'MZ',\n    'Zimbabwe': 'ZW',\n    'Botswana': 'BW',\n    'Namibia': 'NA',\n    'Eswatini': 'SZ',\n    'Lesotho': 'LS',\n    'Madagascar': 'MG',\n    'Comoros': 'KM',\n    'Mauritius': 'MU',\n    'Seychelles': 'SC',\n    'Somalia': 'SO',\n    'Djibouti': 'DJ',\n    'Eritrea': 'ER',\n    'Uganda': 'UG',\n    'Rwanda': 'RW',\n    'Burundi': 'BI',\n    'Tanzania': 'TZ',\n    'Cabo Verde': 'CV',\n    'Guadeloupe': 'GP',\n    'Martinique': 'MQ',\n    'Reunion': 'RE',\n    'Mayotte': 'YT',\n    'Saint Pierre and Miquelon': 'PM',\n    'French Guiana': 'GF',\n    'Suriname': 'SR',\n    'Guyana': 'GY',\n    'Paraguay': 'PY',\n    'Uruguay': 'UY',\n    'Bolivia': 'BO',\n    'Chile': 'CL',\n    'Peru': 'PE',\n    'Colombia': 'CO',\n    'Venezuela': 'VE',\n    'Ecuador': 'EC',\n    'Panama': 'PA',\n    'Costa Rica': 'CR',\n    'Nicaragua': 'NI',\n    'Honduras': 'HN',\n    'El Salvador': 'SV',\n    'Guatemala': 'GT',\n    'Belize': 'BZ',\n    'Jamaica': 'JM',\n    'Cuba': 'CU',\n    'Haiti': 'HT',\n    'Dominican Republic': 'DO',\n    'Bahamas': 'BS',\n    'Barbados': 'BB',\n    'Trinidad and Tobago': 'TT',\n    'Saint Lucia': 'LC',\n    'Saint Vincent and the Grenadines': 'VC',\n    'Grenada': 'GD',\n    'Antigua and Barbuda': 'AG',\n    'Saint Kitts and Nevis': 'KN',\n    'Dominica': 'DM',\n    'Aruba': 'AW',\n    'Curacao': 'CW',\n    'Sint Maarten': 'SX',\n    'Saint Martin (French Part)': 'MF',\n    'Saint Barthelemy': 'BL',\n    'Anguilla': 'AI',\n    'Montserrat': 'MS',\n    'Bermuda': 'BM',\n    'Cayman Islands': 'KY',\n    'Turks and Caicos Islands': 'TC',\n    'British Virgin Islands': 'VG',\n    'United States Virgin Islands': 'VI',\n    'Puerto Rico': 'PR',\n    'Greenland': 'GL',\n    'Falkland Islands': 'FK',\n    'South Georgia and the South Sandwich Islands': 'GS',\n    'Antarctica': 'AQ'\n  };\n  const code = countryToCode[countryName];\n  if (!code) return '🌐';\n  // Convert country code to regional indicator symbols\n  return code.toUpperCase().replace(/./g, char => String.fromCodePoint(127397 + char.charCodeAt()));\n}\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","useRef","worldMapSVG","jsxDEV","_jsxDEV","addDataNameToSVG","svgString","window","DOMParser","parser","doc","parseFromString","groups","querySelectorAll","forEach","g","title","querySelector","name","textContent","el","setAttribute","documentElement","outerHTML","getCountryCentroids","centroids","circle","x","parseFloat","getAttribute","y","path","getBBox","bbox","width","height","WorldMap","selectedLocations","setSelectedLocations","onLocationClick","_s","hoveredName","setHoveredName","mousePos","setMousePos","transform","setTransform","scale","svgContainerRef","pinPositions","setPinPositions","processedSVG","_svgContainerRef$curr","svgEl","current","p","classList","remove","pins","loc","gs","Array","from","filter","largestArea","pin","add","area","e","push","handleLocationClick","event","target","tagName","parentNode","id","prev","exists","find","s","onLocationMouseOver","dataset","onLocationMouseOut","handleZoomIn","Math","min","handleZoomOut","max","handleReset","handleMouseMove","clientX","clientY","pinSVG","viewBox","fill","xmlns","children","cx","cy","rx","ry","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","d","strokeLinecap","r","className","ref","dangerouslySetInnerHTML","__html","onClick","onMouseOver","onMouseOut","onMouseMove","style","transformOrigin","position","top","left","pointerEvents","map","opacity","props","length","colSpan","textAlign","color","idx","role","getFlagEmoji","_c","countryName","countryToCode","code","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","$RefreshReg$"],"sources":["/Users/omprakashutaha/Desktop/Map2/src/components/WorldMap.js"],"sourcesContent":["import React, { useState, useMemo, useEffect, useRef } from 'react';\nimport { worldMapSVG } from '../assets/worldMapData';\nimport './WorldMap.css';\n\n// Robustly add data-name attributes using DOMParser\nfunction addDataNameToSVG(svgString) {\n  if (typeof window === 'undefined' || !window.DOMParser) return svgString;\n  const parser = new window.DOMParser();\n  const doc = parser.parseFromString(svgString, 'image/svg+xml');\n  const groups = doc.querySelectorAll('g');\n  groups.forEach(g => {\n    const title = g.querySelector('title');\n    if (title) {\n      const name = title.textContent;\n      g.querySelectorAll('path, circle').forEach(el => {\n        el.setAttribute('data-name', name);\n      });\n    }\n  });\n  return doc.documentElement.outerHTML;\n}\n\n// Helper to get the centroid of a country's path or circle\nfunction getCountryCentroids(svgString) {\n  const centroids = {};\n  if (typeof window === 'undefined' || !window.DOMParser) return centroids;\n  const parser = new window.DOMParser();\n  const doc = parser.parseFromString(svgString, 'image/svg+xml');\n  const groups = doc.querySelectorAll('g');\n  groups.forEach(g => {\n    const title = g.querySelector('title');\n    const name = title ? title.textContent : null;\n    if (!name) return;\n    // Try to get a circle (for small countries)\n    const circle = g.querySelector('circle');\n    if (circle) {\n      centroids[name] = {\n        x: parseFloat(circle.getAttribute('cx')),\n        y: parseFloat(circle.getAttribute('cy')),\n      };\n      return;\n    }\n    // Try to get a path and compute its bounding box center\n    const path = g.querySelector('path');\n    if (path && path.getBBox) {\n      const bbox = path.getBBox();\n      centroids[name] = {\n        x: bbox.x + bbox.width / 2,\n        y: bbox.y + bbox.height / 2,\n      };\n    }\n  });\n  return centroids;\n}\n\nfunction WorldMap({ selectedLocations = [], setSelectedLocations = () => {}, onLocationClick = () => {} }) {\n  const [hoveredName, setHoveredName] = useState('');\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n  const [transform, setTransform] = useState({ x: 0, y: 0, scale: 1 });\n  const svgContainerRef = useRef();\n  const [pinPositions, setPinPositions] = useState([]);\n\n  // Memoize the processed SVG string\n  const processedSVG = useMemo(() => addDataNameToSVG(worldMapSVG), []);\n\n  // Memoize centroids for pins\n  const centroids = useMemo(() => getCountryCentroids(worldMapSVG), []);\n\n  // Highlight selected countries and compute pin positions after SVG is rendered\n  useEffect(() => {\n    const svgEl = svgContainerRef.current?.querySelector('svg');\n    if (!svgEl) return;\n    // Remove previous selected\n    svgEl.querySelectorAll('path.selected').forEach(p => p.classList.remove('selected'));\n    // For pins\n    const pins = [];\n    selectedLocations.forEach(loc => {\n      // Find all <g> with matching <title>\n      const gs = Array.from(svgEl.querySelectorAll('g')).filter(\n        g => g.querySelector('title') && g.querySelector('title').textContent === loc.name\n      );\n      let largestArea = 0;\n      let pin = null;\n      gs.forEach(g => {\n        // Highlight all paths\n        g.querySelectorAll('path').forEach(path => {\n          path.classList.add('selected');\n          // For pin: use the largest path's bbox\n          try {\n            const bbox = path.getBBox();\n            const area = bbox.width * bbox.height;\n            if (area > largestArea) {\n              largestArea = area;\n              pin = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\n            }\n          } catch (e) {}\n        });\n        // If there is a circle, prefer it for small countries\n        const circle = g.querySelector('circle');\n        if (circle) {\n          pin = {\n            x: parseFloat(circle.getAttribute('cx')),\n            y: parseFloat(circle.getAttribute('cy')),\n          };\n        }\n      });\n      if (pin) pins.push({ name: loc.name, ...pin });\n    });\n    setPinPositions(pins);\n  }, [selectedLocations, processedSVG]);\n\n  function handleLocationClick(event) {\n    let el = event.target;\n    let g = null;\n    // Walk up to the nearest <g> with a <title>\n    while (el && el.tagName !== 'svg') {\n      if (el.tagName === 'g' && el.querySelector('title')) {\n        g = el;\n        break;\n      }\n      el = el.parentNode;\n    }\n    if (!g) return;\n    const id = g.getAttribute('id') || g.querySelector('title').textContent;\n    const name = g.querySelector('title').textContent;\n    if (!id || !name) return;\n\n    setSelectedLocations(prev => {\n      const exists = prev.find(s => s.id === id);\n      if (exists) {\n        return prev.filter(s => s.id !== id);\n      } else {\n        return [...prev, { id, name }];\n      }\n    });\n    onLocationClick({ id, name });\n  }\n\n  function onLocationMouseOver(event) {\n    const name = event.target.dataset.name;\n    if (name) {\n      setHoveredName(name);\n    } else {\n      setHoveredName('');\n    }\n  }\n\n  function onLocationMouseOut() {\n    setHoveredName('');\n  }\n\n  function handleZoomIn() {\n    setTransform(prev => ({\n      ...prev,\n      scale: Math.min(prev.scale * 1.2, 5)\n    }));\n  }\n\n  function handleZoomOut() {\n    setTransform(prev => ({\n      ...prev,\n      scale: Math.max(prev.scale * 0.8, 0.5)\n    }));\n  }\n\n  function handleReset() {\n    setTransform({ x: 0, y: 0, scale: 1 });\n  }\n\n  function handleMouseMove(event) {\n    setMousePos({ x: event.clientX, y: event.clientY });\n  }\n\n  // Pin SVG\n  const pinSVG = (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g>\n        <ellipse cx=\"12\" cy=\"8.5\" rx=\"5\" ry=\"5.5\" fill=\"#e53935\" stroke=\"#b71c1c\" strokeWidth=\"1.5\"/>\n        <path d=\"M12 14V22\" stroke=\"#b71c1c\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n        <circle cx=\"12\" cy=\"8.5\" r=\"2\" fill=\"#fff\"/>\n      </g>\n    </svg>\n  );\n\n  return (\n    <div className=\"world-map-container\">\n      <div\n        className=\"world-map-svg\"\n        ref={svgContainerRef}\n        dangerouslySetInnerHTML={{ __html: processedSVG }}\n        onClick={handleLocationClick}\n        onMouseOver={onLocationMouseOver}\n        onMouseOut={onLocationMouseOut}\n        onMouseMove={handleMouseMove}\n        style={{\n          transform: `scale(${transform.scale})`,\n          transformOrigin: 'center center',\n        }}\n      />\n      {/* Render pins for selected countries */}\n      <svg\n        className=\"world-map-pins\"\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none',\n        }}\n        viewBox=\"0 0 2754 1398\"\n      >\n        {pinPositions.map(pin => (\n          <g key={pin.name} transform={`translate(${pin.x},${pin.y})`}>\n            <ellipse cx={0} cy={0} rx={18} ry={18} fill=\"#e53935\" opacity=\"0.15\" />\n            <g transform=\"translate(-12,-24)\">{pinSVG.props.children}</g>\n          </g>\n        ))}\n      </svg>\n      <div className=\"zoom-controls\">\n        <button className=\"zoom-button\" onClick={handleZoomIn} title=\"Zoom In\">+</button>\n        <button className=\"zoom-button\" onClick={handleZoomOut} title=\"Zoom Out\">−</button>\n        <button className=\"zoom-button\" onClick={handleReset} title=\"Reset View\">↺</button>\n      </div>\n      {/* List of Visited Countries Table */}\n      <div className=\"visited-countries-card\">\n        <h3 className=\"visited-countries-title\">List of Visited Countries</h3>\n        <table className=\"visited-countries-table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Country</th>\n            </tr>\n          </thead>\n          <tbody>\n            {selectedLocations.length === 0 ? (\n              <tr>\n                <td colSpan={2} style={{ textAlign: 'center', color: '#aaa' }}>No countries selected yet.</td>\n              </tr>\n            ) : (\n              selectedLocations.map((loc, idx) => (\n                <tr key={loc.id}>\n                  <td>{idx + 1}</td>\n                  <td className=\"country-name-cell\">\n                    <span className=\"country-flag\" role=\"img\" aria-label={loc.name}>\n                      {getFlagEmoji(loc.name)}\n                    </span>\n                    {loc.name}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n      {hoveredName && (\n        <div\n          className=\"world-map-tooltip\"\n          style={{\n            left: mousePos.x + 12,\n            top: mousePos.y + 12\n          }}\n        >\n          {hoveredName}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Helper to get flag emoji from country name (simple mapping for demo)\nfunction getFlagEmoji(countryName) {\n  // ISO country code mapping (partial, for demo)\n  const countryToCode = {\n    'India': 'IN',\n    'United States of America': 'US',\n    'United States': 'US',\n    'Canada': 'CA',\n    'Australia': 'AU',\n    'United Kingdom': 'GB',\n    'France': 'FR',\n    'Germany': 'DE',\n    'Japan': 'JP',\n    'China': 'CN',\n    'Brazil': 'BR',\n    'South Africa': 'ZA',\n    'Italy': 'IT',\n    'Spain': 'ES',\n    'Russia': 'RU',\n    'Mexico': 'MX',\n    'Pakistan': 'PK',\n    'Bangladesh': 'BD',\n    'Indonesia': 'ID',\n    'Turkey': 'TR',\n    'Argentina': 'AR',\n    'Nigeria': 'NG',\n    'Egypt': 'EG',\n    'Saudi Arabia': 'SA',\n    'South Korea': 'KR',\n    'North Korea': 'KP',\n    'Vietnam': 'VN',\n    'Thailand': 'TH',\n    'Malaysia': 'MY',\n    'Singapore': 'SG',\n    'New Zealand': 'NZ',\n    'Nepal': 'NP',\n    'Sri Lanka': 'LK',\n    'Afghanistan': 'AF',\n    'United Arab Emirates': 'AE',\n    'Qatar': 'QA',\n    'Kuwait': 'KW',\n    'Oman': 'OM',\n    'Iraq': 'IQ',\n    'Iran': 'IR',\n    'Israel': 'IL',\n    'Jordan': 'JO',\n    'Morocco': 'MA',\n    'Kenya': 'KE',\n    'Ethiopia': 'ET',\n    'Greece': 'GR',\n    'Switzerland': 'CH',\n    'Netherlands': 'NL',\n    'Belgium': 'BE',\n    'Sweden': 'SE',\n    'Norway': 'NO',\n    'Denmark': 'DK',\n    'Finland': 'FI',\n    'Poland': 'PL',\n    'Ukraine': 'UA',\n    'Czech Republic': 'CZ',\n    'Austria': 'AT',\n    'Portugal': 'PT',\n    'Ireland': 'IE',\n    'Hungary': 'HU',\n    'Romania': 'RO',\n    'Slovakia': 'SK',\n    'Slovenia': 'SI',\n    'Croatia': 'HR',\n    'Bulgaria': 'BG',\n    'Serbia': 'RS',\n    'Turkey': 'TR',\n    'Philippines': 'PH',\n    'Myanmar': 'MM',\n    'Cambodia': 'KH',\n    'Laos': 'LA',\n    'Mongolia': 'MN',\n    'Kazakhstan': 'KZ',\n    'Uzbekistan': 'UZ',\n    'Turkmenistan': 'TM',\n    'Kyrgyzstan': 'KG',\n    'Tajikistan': 'TJ',\n    'Georgia': 'GE',\n    'Armenia': 'AM',\n    'Azerbaijan': 'AZ',\n    'Belarus': 'BY',\n    'Lithuania': 'LT',\n    'Latvia': 'LV',\n    'Estonia': 'EE',\n    'Iceland': 'IS',\n    'Luxembourg': 'LU',\n    'Liechtenstein': 'LI',\n    'Malta': 'MT',\n    'Cyprus': 'CY',\n    'Monaco': 'MC',\n    'San Marino': 'SM',\n    'Vatican City': 'VA',\n    'Andorra': 'AD',\n    'Albania': 'AL',\n    'Bosnia and Herzegovina': 'BA',\n    'Montenegro': 'ME',\n    'North Macedonia, Republic of': 'MK',\n    'Moldova': 'MD',\n    'Gibraltar': 'GI',\n    'Greenland': 'GL',\n    'Faroe Islands': 'FO',\n    'Svalbard': 'SJ',\n    'Palestine': 'PS',\n    'Lebanon': 'LB',\n    'Syria': 'SY',\n    'Yemen': 'YE',\n    'Sudan': 'SD',\n    'South Sudan': 'SS',\n    'Libya': 'LY',\n    'Tunisia': 'TN',\n    'Algeria': 'DZ',\n    'Western Sahara': 'EH',\n    'Mauritania': 'MR',\n    'Mali': 'ML',\n    'Senegal': 'SN',\n    'Gambia': 'GM',\n    'Guinea-Bissau': 'GW',\n    'Guinea': 'GN',\n    'Sierra Leone': 'SL',\n    'Liberia': 'LR',\n    'Ivory Coast': 'CI',\n    'Ghana': 'GH',\n    'Togo': 'TG',\n    'Benin': 'BJ',\n    'Burkina Faso': 'BF',\n    'Niger': 'NE',\n    'Chad': 'TD',\n    'Cameroon': 'CM',\n    'Central African Republic': 'CF',\n    'Congo, Democratic Republic of the': 'CD',\n    'Congo, Republic of the': 'CG',\n    'Gabon': 'GA',\n    'Equatorial Guinea': 'GQ',\n    'Sao Tome and Principe': 'ST',\n    'Angola': 'AO',\n    'Zambia': 'ZM',\n    'Malawi': 'MW',\n    'Mozambique': 'MZ',\n    'Zimbabwe': 'ZW',\n    'Botswana': 'BW',\n    'Namibia': 'NA',\n    'Eswatini': 'SZ',\n    'Lesotho': 'LS',\n    'Madagascar': 'MG',\n    'Comoros': 'KM',\n    'Mauritius': 'MU',\n    'Seychelles': 'SC',\n    'Somalia': 'SO',\n    'Djibouti': 'DJ',\n    'Eritrea': 'ER',\n    'Uganda': 'UG',\n    'Rwanda': 'RW',\n    'Burundi': 'BI',\n    'Tanzania': 'TZ',\n    'Cabo Verde': 'CV',\n    'Guadeloupe': 'GP',\n    'Martinique': 'MQ',\n    'Reunion': 'RE',\n    'Mayotte': 'YT',\n    'Saint Pierre and Miquelon': 'PM',\n    'French Guiana': 'GF',\n    'Suriname': 'SR',\n    'Guyana': 'GY',\n    'Paraguay': 'PY',\n    'Uruguay': 'UY',\n    'Bolivia': 'BO',\n    'Chile': 'CL',\n    'Peru': 'PE',\n    'Colombia': 'CO',\n    'Venezuela': 'VE',\n    'Ecuador': 'EC',\n    'Panama': 'PA',\n    'Costa Rica': 'CR',\n    'Nicaragua': 'NI',\n    'Honduras': 'HN',\n    'El Salvador': 'SV',\n    'Guatemala': 'GT',\n    'Belize': 'BZ',\n    'Jamaica': 'JM',\n    'Cuba': 'CU',\n    'Haiti': 'HT',\n    'Dominican Republic': 'DO',\n    'Bahamas': 'BS',\n    'Barbados': 'BB',\n    'Trinidad and Tobago': 'TT',\n    'Saint Lucia': 'LC',\n    'Saint Vincent and the Grenadines': 'VC',\n    'Grenada': 'GD',\n    'Antigua and Barbuda': 'AG',\n    'Saint Kitts and Nevis': 'KN',\n    'Dominica': 'DM',\n    'Aruba': 'AW',\n    'Curacao': 'CW',\n    'Sint Maarten': 'SX',\n    'Saint Martin (French Part)': 'MF',\n    'Saint Barthelemy': 'BL',\n    'Anguilla': 'AI',\n    'Montserrat': 'MS',\n    'Bermuda': 'BM',\n    'Cayman Islands': 'KY',\n    'Turks and Caicos Islands': 'TC',\n    'British Virgin Islands': 'VG',\n    'United States Virgin Islands': 'VI',\n    'Puerto Rico': 'PR',\n    'Greenland': 'GL',\n    'Falkland Islands': 'FK',\n    'South Georgia and the South Sandwich Islands': 'GS',\n    'Antarctica': 'AQ',\n  };\n  const code = countryToCode[countryName];\n  if (!code) return '🌐';\n  // Convert country code to regional indicator symbols\n  return code\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(127397 + char.charCodeAt()));\n}\n\nexport default WorldMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}