{"ast":null,"code":"export function processSVGData(svgData) {\n  // Extract all country groups from the SVG data\n  const countryGroups = svgData.match(/<g id=\"[^\"]+\">[\\s\\S]*?<\\/g>/g) || [];\n\n  // Process each country group\n  const countries = countryGroups.map(group => {\n    const idMatch = group.match(/id=\"([^\"]+)\"/);\n    const titleMatch = group.match(/<title>([^<]+)<\\/title>/);\n    const pathMatch = group.match(/<path[^>]*d=\"([^\"]+)\"[^>]*>/);\n    const circleMatch = group.match(/<circle[^>]*cx=\"([^\"]+)\"[^>]*cy=\"([^\"]+)\"[^>]*>/);\n    if (!idMatch || !titleMatch) return null;\n    return {\n      id: idMatch[1],\n      name: titleMatch[1],\n      path: pathMatch ? pathMatch[1] : null,\n      center: circleMatch ? {\n        x: parseFloat(circleMatch[1]),\n        y: parseFloat(circleMatch[2])\n      } : null\n    };\n  }).filter(Boolean);\n\n  // Create a map of country data\n  const countryMap = {};\n  countries.forEach(country => {\n    countryMap[country.id] = country;\n  });\n  return {\n    countries,\n    countryMap\n  };\n}\nexport function generateSVGContent(countries) {\n  return `\n    <g id=\"world-map\">\n      ${countries.map(country => `\n        <g id=\"${country.id}\" class=\"country\">\n          <title>${country.name}</title>\n          ${country.path ? `<path d=\"${country.path}\" />` : ''}\n          ${country.center ? `<circle cx=\"${country.center.x}\" cy=\"${country.center.y}\" r=\"6\" />` : ''}\n        </g>\n      `).join('\\n')}\n    </g>\n  `;\n}","map":{"version":3,"names":["processSVGData","svgData","countryGroups","match","countries","map","group","idMatch","titleMatch","pathMatch","circleMatch","id","name","path","center","x","parseFloat","y","filter","Boolean","countryMap","forEach","country","generateSVGContent","join"],"sources":["/Users/omprakashutaha/Desktop/Map2/src/utils/svgProcessor.js"],"sourcesContent":["export function processSVGData(svgData) {\n  // Extract all country groups from the SVG data\n  const countryGroups = svgData.match(/<g id=\"[^\"]+\">[\\s\\S]*?<\\/g>/g) || [];\n  \n  // Process each country group\n  const countries = countryGroups.map(group => {\n    const idMatch = group.match(/id=\"([^\"]+)\"/);\n    const titleMatch = group.match(/<title>([^<]+)<\\/title>/);\n    const pathMatch = group.match(/<path[^>]*d=\"([^\"]+)\"[^>]*>/);\n    const circleMatch = group.match(/<circle[^>]*cx=\"([^\"]+)\"[^>]*cy=\"([^\"]+)\"[^>]*>/);\n    \n    if (!idMatch || !titleMatch) return null;\n    \n    return {\n      id: idMatch[1],\n      name: titleMatch[1],\n      path: pathMatch ? pathMatch[1] : null,\n      center: circleMatch ? {\n        x: parseFloat(circleMatch[1]),\n        y: parseFloat(circleMatch[2])\n      } : null\n    };\n  }).filter(Boolean);\n\n  // Create a map of country data\n  const countryMap = {};\n  countries.forEach(country => {\n    countryMap[country.id] = country;\n  });\n\n  return {\n    countries,\n    countryMap\n  };\n}\n\nexport function generateSVGContent(countries) {\n  return `\n    <g id=\"world-map\">\n      ${countries.map(country => `\n        <g id=\"${country.id}\" class=\"country\">\n          <title>${country.name}</title>\n          ${country.path ? `<path d=\"${country.path}\" />` : ''}\n          ${country.center ? `<circle cx=\"${country.center.x}\" cy=\"${country.center.y}\" r=\"6\" />` : ''}\n        </g>\n      `).join('\\n')}\n    </g>\n  `;\n} "],"mappings":"AAAA,OAAO,SAASA,cAAcA,CAACC,OAAO,EAAE;EACtC;EACA,MAAMC,aAAa,GAAGD,OAAO,CAACE,KAAK,CAAC,8BAA8B,CAAC,IAAI,EAAE;;EAEzE;EACA,MAAMC,SAAS,GAAGF,aAAa,CAACG,GAAG,CAACC,KAAK,IAAI;IAC3C,MAAMC,OAAO,GAAGD,KAAK,CAACH,KAAK,CAAC,cAAc,CAAC;IAC3C,MAAMK,UAAU,GAAGF,KAAK,CAACH,KAAK,CAAC,yBAAyB,CAAC;IACzD,MAAMM,SAAS,GAAGH,KAAK,CAACH,KAAK,CAAC,6BAA6B,CAAC;IAC5D,MAAMO,WAAW,GAAGJ,KAAK,CAACH,KAAK,CAAC,iDAAiD,CAAC;IAElF,IAAI,CAACI,OAAO,IAAI,CAACC,UAAU,EAAE,OAAO,IAAI;IAExC,OAAO;MACLG,EAAE,EAAEJ,OAAO,CAAC,CAAC,CAAC;MACdK,IAAI,EAAEJ,UAAU,CAAC,CAAC,CAAC;MACnBK,IAAI,EAAEJ,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;MACrCK,MAAM,EAAEJ,WAAW,GAAG;QACpBK,CAAC,EAAEC,UAAU,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7BO,CAAC,EAAED,UAAU,CAACN,WAAW,CAAC,CAAC,CAAC;MAC9B,CAAC,GAAG;IACN,CAAC;EACH,CAAC,CAAC,CAACQ,MAAM,CAACC,OAAO,CAAC;;EAElB;EACA,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrBhB,SAAS,CAACiB,OAAO,CAACC,OAAO,IAAI;IAC3BF,UAAU,CAACE,OAAO,CAACX,EAAE,CAAC,GAAGW,OAAO;EAClC,CAAC,CAAC;EAEF,OAAO;IACLlB,SAAS;IACTgB;EACF,CAAC;AACH;AAEA,OAAO,SAASG,kBAAkBA,CAACnB,SAAS,EAAE;EAC5C,OAAO;AACT;AACA,QAAQA,SAAS,CAACC,GAAG,CAACiB,OAAO,IAAI;AACjC,iBAAiBA,OAAO,CAACX,EAAE;AAC3B,mBAAmBW,OAAO,CAACV,IAAI;AAC/B,YAAYU,OAAO,CAACT,IAAI,GAAG,YAAYS,OAAO,CAACT,IAAI,MAAM,GAAG,EAAE;AAC9D,YAAYS,OAAO,CAACR,MAAM,GAAG,eAAeQ,OAAO,CAACR,MAAM,CAACC,CAAC,SAASO,OAAO,CAACR,MAAM,CAACG,CAAC,YAAY,GAAG,EAAE;AACtG;AACA,OAAO,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC;AACnB;AACA,GAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}